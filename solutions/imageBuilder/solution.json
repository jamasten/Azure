{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.1.55165",
      "templateHash": "14659296263801469974"
    }
  },
  "parameters": {
    "DeployFSLogix": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install FSLogix in the image."
      }
    },
    "DeployOffice": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Office 365 in the image."
      }
    },
    "DeployOneDrive": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft One Drive in the image."
      }
    },
    "DeployProject": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Project in the image."
      }
    },
    "DeployTeams": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Teams in the image."
      }
    },
    "DeployVirtualDesktopOptimizationTool": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to run the Virtual Desktop Optimization Tool on the image. https://github.com/The-Virtual-Desktop-Team/Virtual-Desktop-Optimization-Tool"
      }
    },
    "DeployVisio": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Visio in the image."
      }
    },
    "DistributionGroup": {
      "type": "string",
      "metadata": {
        "description": "The distribution group that will recieve email alerts when an AIB image build either succeeds or fails."
      }
    },
    "EnableBuildAutomation": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to enable build automation.  This feature will check daily if a new marketplace image exists and will initiate a build if the image date is newer than the last build date."
      }
    },
    "EnableMonitoringAndAlerting": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to enable monitoring and alerting for the AIB image builds."
      }
    },
    "Environment": {
      "type": "string",
      "defaultValue": "d",
      "metadata": {
        "description": "The target environment for the solution."
      },
      "allowedValues": [
        "d",
        "p",
        "s",
        "t"
      ]
    },
    "ExemptPolicyAssignmentIds": {
      "type": "array",
      "defaultValue": [
        "/subscriptions/3764b123-4849-4395-8e6e-ca6d68d8d4b4/providers/Microsoft.Authorization/policyAssignments/ASC provisioning Guest Configuration agent for Windows"
      ],
      "metadata": {
        "description": "Any Azure polices that would affect the AIB build VM should have an exemption for the AIB staging resource group. Common examples are policies that push the Guest Configuration agent or the Microsoft Defender for Endpoint agent. Reference: https://learn.microsoft.com/en-us/azure/virtual-machines/linux/image-builder-troubleshoot#prerequisites"
      }
    },
    "ImageDefinitionName": {
      "type": "string",
      "defaultValue": "Win11-22h2-avd",
      "metadata": {
        "description": "The name of the Image Definition for the Shared Image Gallery."
      }
    },
    "ImageDefinitionSecurityType": {
      "type": "string",
      "defaultValue": "TrustedLaunch",
      "metadata": {
        "description": "The security type for the Image Definition."
      },
      "allowedValues": [
        "ConfidentialVM",
        "ConfidentialVMSupported",
        "Standard",
        "TrustedLaunch"
      ]
    },
    "ImageOffer": {
      "type": "string",
      "defaultValue": "windows-11",
      "metadata": {
        "description": "The offer of the marketplace image."
      }
    },
    "ImagePublisher": {
      "type": "string",
      "defaultValue": "microsoftwindowsdesktop",
      "metadata": {
        "description": "The publisher of the marketplace image."
      }
    },
    "ImageSku": {
      "type": "string",
      "defaultValue": "win11-22h2-avd",
      "metadata": {
        "description": "The SKU of the marketplace image."
      }
    },
    "ImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The version of the marketplace image."
      }
    },
    "ImageStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "The storage SKU for the image version replica in the Shared Image Gallery."
      }
    },
    "Location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location for the resources deployed in this solution."
      }
    },
    "StorageAccountName": {
      "type": "string",
      "defaultValue": "sacoredeu",
      "metadata": {
        "description": "The name for the storage account containing the scripts & application installers."
      }
    },
    "StorageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "rg-core-d-eu",
      "metadata": {
        "description": "The resource group name for the storage account containing the scripts & application installers."
      }
    },
    "StorageContainerName": {
      "type": "string",
      "defaultValue": "artifacts",
      "metadata": {
        "description": "The name of the container in the storage account containing the scripts & application installers."
      }
    },
    "SubnetName": {
      "type": "string",
      "defaultValue": "Clients",
      "metadata": {
        "description": "The subnet name for the custom virtual network."
      }
    },
    "Tags": {
      "type": "object",
      "defaultValue": {}
    },
    "Timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
      "metadata": {
        "description": "DO NOT MODIFY THIS VALUE! The timestamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
      }
    },
    "VirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D4ds_v5",
      "metadata": {
        "description": "The size of the virtual machine used for creating the image.  The recommendation is to use a 'Standard_D2_v2' size or greater for AVD. https://github.com/danielsollondon/azvmimagebuilder/tree/master/solutions/14_Building_Images_WVD"
      }
    },
    "VirtualNetworkName": {
      "type": "string",
      "defaultValue": "vnet-net-d-eu",
      "metadata": {
        "description": "The name for the custom virtual network."
      }
    },
    "VirtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "rg-net-d-eu",
      "metadata": {
        "description": "The resource group name for the custom virtual network."
      }
    }
  },
  "variables": {
    "ActionGroupName": "[format('ag-{0}', variables('NamingStandard'))]",
    "AutomationAccountName": "[format('aa-{0}', variables('NamingStandard'))]",
    "DeploymentScriptName": "[format('ds-{0}', variables('NamingStandard'))]",
    "ImageTemplateName": "[format('it-{0}-{1}-{2}', toLower(parameters('ImageDefinitionName')), parameters('Environment'), variables('LocationShortName'))]",
    "LocationShortName": "[variables('LocationShortNames')[parameters('Location')]]",
    "LocationShortNames": {
      "australiacentral": "ac",
      "australiacentral2": "ac2",
      "australiaeast": "ae",
      "australiasoutheast": "as",
      "brazilsouth": "bs2",
      "brazilsoutheast": "bs",
      "canadacentral": "cc",
      "canadaeast": "ce",
      "centralindia": "ci",
      "centralus": "cu",
      "chinaeast": "ce",
      "chinaeast2": "ce2",
      "chinanorth": "cn",
      "chinanorth2": "cn2",
      "eastasia": "ea",
      "eastus": "eu",
      "eastus2": "eu2",
      "francecentral": "fc",
      "francesouth": "fs",
      "germanynorth": "gn",
      "germanywestcentral": "gwc",
      "japaneast": "je",
      "japanwest": "jw",
      "jioindiawest": "jiw",
      "koreacentral": "kc",
      "koreasouth": "ks",
      "northcentralus": "ncu",
      "northeurope": "ne2",
      "norwayeast": "ne",
      "norwaywest": "nw",
      "southafricanorth": "san",
      "southafricawest": "saw",
      "southcentralus": "scu",
      "southindia": "si",
      "southeastasia": "sa",
      "switzerlandnorth": "sn",
      "switzerlandwest": "sw",
      "uaecentral": "uc",
      "uaenorth": "un",
      "uksouth": "us",
      "ukwest": "uw",
      "usdodcentral": "uc",
      "usdodeast": "ue",
      "usgovarizona": "az",
      "usgoviowa": "io",
      "usgovtexas": "tx",
      "usgovvirginia": "va",
      "westcentralus": "wcu",
      "westeurope": "we",
      "westindia": "wi",
      "westus": "wu",
      "westus2": "wu2",
      "westus3": "wu3"
    },
    "LogAnalyticsWorkspaceName": "[format('law-{0}', variables('NamingStandard'))]",
    "NamingStandard": "[format('aib-{0}-{1}', parameters('Environment'), variables('LocationShortName'))]",
    "ResourceGroup": "[format('rg-{0}', variables('NamingStandard'))]",
    "Roles": "[union(variables('Roles_Default'), variables('Role_AzureCloud'))]",
    "Roles_Default": [
      {
        "resourceGroup": "[parameters('VirtualNetworkResourceGroupName')]",
        "name": "Virtual Network Join",
        "description": "Allow resources to join a subnet",
        "permissions": [
          {
            "actions": [
              "Microsoft.Network/virtualNetworks/read",
              "Microsoft.Network/virtualNetworks/subnets/read",
              "Microsoft.Network/virtualNetworks/subnets/join/action",
              "Microsoft.Network/virtualNetworks/subnets/write"
            ]
          }
        ]
      },
      {
        "resourceGroup": "[variables('ResourceGroup')]",
        "name": "Image Template Contributor",
        "description": "Allow the creation and management of images",
        "permissions": [
          {
            "actions": [
              "Microsoft.Compute/galleries/read",
              "Microsoft.Compute/galleries/images/read",
              "Microsoft.Compute/galleries/images/versions/read",
              "Microsoft.Compute/galleries/images/versions/write",
              "Microsoft.Compute/images/read",
              "Microsoft.Compute/images/write",
              "Microsoft.Compute/images/delete"
            ]
          }
        ]
      },
      {
        "resourceGroup": "[variables('ResourceGroup')]",
        "name": "Deployment Script Contributor",
        "description": "Allow Deployment Scripts to deploy required resources to run scripts",
        "permissions": [
          {
            "actions": [
              "Microsoft.Storage/storageAccounts/*",
              "Microsoft.ContainerInstance/containerGroups/*",
              "Microsoft.Resources/deployments/*",
              "Microsoft.Resources/deploymentScripts/*",
              "Microsoft.ManagedIdentity/userAssignedIdentities/assign/action"
            ]
          }
        ]
      }
    ],
    "Role_AzureCloud": "[if(equals(environment().name, 'AzureCloud'), createArray(createObject('resourceGroup', variables('ResourceGroup'), 'name', 'Image Template Build Automation', 'description', 'Allow Image Template build automation using a Managed Identity on an Automation Account.', 'permissions', createArray(createObject('actions', createArray('Microsoft.VirtualMachineImages/imageTemplates/run/action', 'Microsoft.VirtualMachineImages/imageTemplates/read', 'Microsoft.Compute/locations/publishers/artifacttypes/offers/skus/versions/read', 'Microsoft.Compute/locations/publishers/artifacttypes/offers/skus/read', 'Microsoft.Compute/locations/publishers/artifacttypes/offers/read', 'Microsoft.Compute/locations/publishers/read'))))), createArray())]",
    "StagingResourceGroupName": "[format('rg-aib-{0}-{1}-staging-{2}', parameters('Environment'), variables('LocationShortName'), toLower(parameters('ImageDefinitionName')))]",
    "StorageUri": "[format('https://{0}.blob.{1}/{2}/', parameters('StorageAccountName'), environment().suffixes.storage, parameters('StorageContainerName'))]",
    "TimeZone": "[variables('TimeZones')[parameters('Location')]]",
    "TimeZones": {
      "australiacentral": "AUS Eastern Standard Time",
      "australiacentral2": "AUS Eastern Standard Time",
      "australiaeast": "AUS Eastern Standard Time",
      "australiasoutheast": "AUS Eastern Standard Time",
      "brazilsouth": "E. South America Standard Time",
      "brazilsoutheast": "E. South America Standard Time",
      "canadacentral": "Eastern Standard Time",
      "canadaeast": "Eastern Standard Time",
      "centralindia": "India Standard Time",
      "centralus": "Central Standard Time",
      "chinaeast": "China Standard Time",
      "chinaeast2": "China Standard Time",
      "chinanorth": "China Standard Time",
      "chinanorth2": "China Standard Time",
      "eastasia": "China Standard Time",
      "eastus": "Eastern Standard Time",
      "eastus2": "Eastern Standard Time",
      "francecentral": "Central Europe Standard Time",
      "francesouth": "Central Europe Standard Time",
      "germanynorth": "Central Europe Standard Time",
      "germanywestcentral": "Central Europe Standard Time",
      "japaneast": "Tokyo Standard Time",
      "japanwest": "Tokyo Standard Time",
      "jioindiacentral": "India Standard Time",
      "jioindiawest": "India Standard Time",
      "koreacentral": "Korea Standard Time",
      "koreasouth": "Korea Standard Time",
      "northcentralus": "Central Standard Time",
      "northeurope": "GMT Standard Time",
      "norwayeast": "Central Europe Standard Time",
      "norwaywest": "Central Europe Standard Time",
      "southafricanorth": "South Africa Standard Time",
      "southafricawest": "South Africa Standard Time",
      "southcentralus": "Central Standard Time",
      "southindia": "India Standard Time",
      "southeastasia": "Singapore Standard Time",
      "swedencentral": "Central Europe Standard Time",
      "switzerlandnorth": "Central Europe Standard Time",
      "switzerlandwest": "Central Europe Standard Time",
      "uaecentral": "Arabian Standard Time",
      "uaenorth": "Arabian Standard Time",
      "uksouth": "GMT Standard Time",
      "ukwest": "GMT Standard Time",
      "usdodcentral": "Central Standard Time",
      "usdodeast": "Eastern Standard Time",
      "usgovarizona": "Mountain Standard Time",
      "usgoviowa": "Central Standard Time",
      "usgovtexas": "Central Standard Time",
      "usgovvirginia": "Eastern Standard Time",
      "westcentralus": "Mountain Standard Time",
      "westeurope": "Central Europe Standard Time",
      "westindia": "India Standard Time",
      "westus": "Pacific Standard Time",
      "westus2": "Pacific Standard Time",
      "westus3": "Mountain Standard Time"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2019-10-01",
      "name": "[variables('ResourceGroup')]",
      "location": "[parameters('Location')]",
      "tags": "[parameters('Tags')]",
      "properties": {}
    },
    {
      "copy": {
        "name": "roleDefinitions",
        "count": "[length(range(0, length(variables('Roles'))))]"
      },
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2015-07-01",
      "name": "[guid(variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].name, subscription().id)]",
      "properties": {
        "roleName": "[format('{0} ({1})', variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].name, subscription().subscriptionId)]",
        "description": "[variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].description]",
        "permissions": "[variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].permissions]",
        "assignableScopes": [
          "[subscription().id]"
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('UserAssignedIdentity_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "LocationShortName": {
            "value": "[variables('LocationShortName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "12714623282568001490"
            }
          },
          "parameters": {
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "LocationShortName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[format('uai-aib-{0}-{1}', parameters('Environment'), parameters('LocationShortName'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]"
            }
          ],
          "outputs": {
            "userAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uai-aib-{0}-{1}', parameters('Environment'), parameters('LocationShortName'))), '2018-11-30').principalId]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uai-aib-{0}-{1}', parameters('Environment'), parameters('LocationShortName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]"
      ]
    },
    {
      "copy": {
        "name": "roleAssignments",
        "count": "[length(range(0, length(variables('Roles'))))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RoleAssignments_{0}_{1}', range(0, length(variables('Roles')))[copyIndex()], parameters('Timestamp'))]",
      "resourceGroup": "[variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].resourceGroup]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PrincipalId": "[if(equals(variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].name, 'Image Template Build Automation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('AutomationAccount_{0}', parameters('Timestamp'))), '2022-09-01').outputs.principalId.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value))]",
          "RoleDefinitionId": {
            "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(variables('Roles')[range(0, length(variables('Roles')))[range(0, length(variables('Roles')))[copyIndex()]]].name, subscription().id))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "17109457504913498348"
            }
          },
          "parameters": {
            "PrincipalId": {
              "type": "string"
            },
            "RoleDefinitionId": {
              "type": "string"
            },
            "StorageAccountName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('StorageAccountName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('StorageAccountName'))]",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[empty(parameters('StorageAccountName'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('AutomationAccount_{0}', parameters('Timestamp')))]",
        "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(variables('Roles')[range(0, length(variables('Roles')))[range(0, length(variables('Roles')))[copyIndex()]]].name, subscription().id))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RoleAssignment_{0}_{1}', parameters('StorageAccountName'), parameters('Timestamp'))]",
      "resourceGroup": "[parameters('StorageAccountResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
          },
          "RoleDefinitionId": {
            "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]"
          },
          "StorageAccountName": {
            "value": "[parameters('StorageAccountName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "17109457504913498348"
            }
          },
          "parameters": {
            "PrincipalId": {
              "type": "string"
            },
            "RoleDefinitionId": {
              "type": "string"
            },
            "StorageAccountName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('StorageAccountName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('StorageAccountName'))]",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[empty(parameters('StorageAccountName'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "condition": "[equals(environment().name, 'AzureUSGovernment')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RoleAssignment_{0}_{1}', variables('ResourceGroup'), parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
          },
          "RoleDefinitionId": {
            "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "17109457504913498348"
            }
          },
          "parameters": {
            "PrincipalId": {
              "type": "string"
            },
            "RoleDefinitionId": {
              "type": "string"
            },
            "StorageAccountName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('StorageAccountName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('StorageAccountName'))]",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[empty(parameters('StorageAccountName'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ComputeGallery_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "ImageDefinitionName": {
            "value": "[parameters('ImageDefinitionName')]"
          },
          "ImageDefinitionSecurityType": {
            "value": "[parameters('ImageDefinitionSecurityType')]"
          },
          "ImageOffer": {
            "value": "[parameters('ImageOffer')]"
          },
          "ImagePublisher": {
            "value": "[parameters('ImagePublisher')]"
          },
          "ImageSku": {
            "value": "[parameters('ImageSku')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "LocationShortName": {
            "value": "[variables('LocationShortName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "13885133433360152494"
            }
          },
          "parameters": {
            "Environment": {
              "type": "string"
            },
            "ImageDefinitionName": {
              "type": "string"
            },
            "ImageDefinitionSecurityType": {
              "type": "string"
            },
            "ImageOffer": {
              "type": "string"
            },
            "ImagePublisher": {
              "type": "string"
            },
            "ImageSku": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "LocationShortName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-01-03",
              "name": "[format('cg_aib_{0}_{1}', parameters('Environment'), parameters('LocationShortName'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]"
            },
            {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2022-01-03",
              "name": "[format('{0}/{1}', format('cg_aib_{0}_{1}', parameters('Environment'), parameters('LocationShortName')), parameters('ImageDefinitionName'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "osType": "Windows",
                "osState": "Generalized",
                "hyperVGeneration": "[if(or(contains(parameters('ImageSku'), '-g2'), contains(parameters('ImageSku'), 'win11-')), 'V2', 'V1')]",
                "identifier": {
                  "publisher": "[parameters('ImagePublisher')]",
                  "offer": "[parameters('ImageOffer')]",
                  "sku": "[parameters('ImageSku')]"
                },
                "features": "[if(equals(parameters('ImageDefinitionSecurityType'), 'Standard'), null(), createArray(createObject('name', 'SecurityType', 'value', parameters('ImageDefinitionSecurityType'))))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/galleries', format('cg_aib_{0}_{1}', parameters('Environment'), parameters('LocationShortName')))]"
              ]
            }
          ],
          "outputs": {
            "ImageDefinitionResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/galleries/images', format('cg_aib_{0}_{1}', parameters('Environment'), parameters('LocationShortName')), parameters('ImageDefinitionName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(and(not(empty(parameters('SubnetName'))), not(empty(parameters('VirtualNetworkName')))), not(empty(parameters('VirtualNetworkResourceGroupName'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('NetworkPolicy_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "LocationShortName": {
            "value": "[variables('LocationShortName')]"
          },
          "SubnetName": {
            "value": "[parameters('SubnetName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          },
          "Timestamp": {
            "value": "[parameters('Timestamp')]"
          },
          "UserAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          },
          "VirtualNetworkName": {
            "value": "[parameters('VirtualNetworkName')]"
          },
          "VirtualNetworkResourceGroupName": {
            "value": "[parameters('VirtualNetworkResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "1428523563751944765"
            }
          },
          "parameters": {
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "LocationShortName": {
              "type": "string"
            },
            "SubnetName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string"
            },
            "UserAssignedIdentityResourceId": {
              "type": "string"
            },
            "VirtualNetworkName": {
              "type": "string"
            },
            "VirtualNetworkResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('ds-aib-{0}-{1}', parameters('Environment'), parameters('LocationShortName'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('UserAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "forceUpdateTag": "[parameters('Timestamp')]",
                "azPowerShellVersion": "5.4",
                "arguments": "[format('-SubnetName {0} -VirtualNetworkName {1} -VirtualNetworkResourceGroupName {2}', parameters('SubnetName'), parameters('VirtualNetworkName'), parameters('VirtualNetworkResourceGroupName'))]",
                "primaryScriptUri": "https://raw.githubusercontent.com/jamasten/Azure/main/solutions/imageBuilder/scripts/Disable-AzurePrivateLinkServiceNetworkPolicy.ps1",
                "timeout": "PT2H",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('RoleAssignment_{0}_{1}', variables('ResourceGroup'), parameters('Timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('StorageAccountResourceGroupName')), 'Microsoft.Resources/deployments', format('RoleAssignment_{0}_{1}', parameters('StorageAccountName'), parameters('Timestamp')))]",
        "roleAssignments",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "condition": "[or(or(parameters('DeployOffice'), parameters('DeployProject')), parameters('DeployVisio'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Office365_Configuration_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentScriptName": {
            "value": "[variables('DeploymentScriptName')]"
          },
          "DeployOffice": {
            "value": "[parameters('DeployOffice')]"
          },
          "DeployProject": {
            "value": "[parameters('DeployProject')]"
          },
          "DeployVisio": {
            "value": "[parameters('DeployVisio')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "StorageAccountName": {
            "value": "[parameters('StorageAccountName')]"
          },
          "StorageAccountResourceGroupName": {
            "value": "[parameters('StorageAccountResourceGroupName')]"
          },
          "StorageContainerName": {
            "value": "[parameters('StorageContainerName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "11146884772912371386"
            }
          },
          "parameters": {
            "DeploymentScriptName": {
              "type": "string"
            },
            "DeployOffice": {
              "type": "bool"
            },
            "DeployProject": {
              "type": "bool"
            },
            "DeployVisio": {
              "type": "bool"
            },
            "Location": {
              "type": "string"
            },
            "StorageAccountName": {
              "type": "string"
            },
            "StorageAccountResourceGroupName": {
              "type": "string"
            },
            "StorageContainerName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "variables": {
            "FileName": "office365x64.xml",
            "O365ConfigHeader": "<Add OfficeClientEdition=\"64\" Channel=\"Current\"><Add OfficeClientEdition=\"64\" Channel=\"Current\">",
            "O365AddOffice": "[if(parameters('DeployOffice'), '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /></Product>', '')]",
            "O365AddProject": "[if(parameters('DeployProject'), '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>', '')]",
            "O365AddVisio": "[if(parameters('DeployVisio'), '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>', '')]",
            "O365ConfigFooter": "</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/><Property Name=\"SharedComputerLicensing\" Value=\"1\"/></Configuration>",
            "Content": "[format('{0}{1}{2}{3}{4}', variables('O365ConfigHeader'), variables('O365AddOffice'), variables('O365AddProject'), variables('O365AddVisio'), variables('O365ConfigFooter'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-o365', parameters('DeploymentScriptName'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.26.1",
                "timeout": "PT5M",
                "retentionInterval": "PT1H",
                "environmentVariables": [
                  {
                    "name": "AZURE_STORAGE_ACCOUNT",
                    "value": "[parameters('StorageAccountName')]"
                  },
                  {
                    "name": "AZURE_STORAGE_KEY",
                    "secureValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('StorageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2021-01-01').keys[0].value]"
                  },
                  {
                    "name": "CONTENT",
                    "value": "[variables('Content')]"
                  }
                ],
                "scriptContent": "[format('echo \"$CONTENT\" > {0} && az storage blob upload -f {1} -c {2} -n {3}', variables('FileName'), variables('FileName'), parameters('StorageContainerName'), variables('FileName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]"
      ]
    },
    {
      "condition": "[parameters('DeployOneDrive')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('OneDrive_Configuration_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentScriptName": {
            "value": "[variables('DeploymentScriptName')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "StorageAccountName": {
            "value": "[parameters('StorageAccountName')]"
          },
          "StorageAccountResourceGroupName": {
            "value": "[parameters('StorageAccountResourceGroupName')]"
          },
          "StorageContainerName": {
            "value": "[parameters('StorageContainerName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "2406429073076814994"
            }
          },
          "parameters": {
            "DeploymentScriptName": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "StorageAccountName": {
              "type": "string"
            },
            "StorageAccountResourceGroupName": {
              "type": "string"
            },
            "StorageContainerName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "variables": {
            "FileName": "tenantId.txt"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-onedrive', parameters('DeploymentScriptName'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.26.1",
                "timeout": "PT5M",
                "retentionInterval": "PT1H",
                "environmentVariables": [
                  {
                    "name": "AZURE_STORAGE_ACCOUNT",
                    "value": "[parameters('StorageAccountName')]"
                  },
                  {
                    "name": "AZURE_STORAGE_KEY",
                    "secureValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('StorageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2021-01-01').keys[0].value]"
                  },
                  {
                    "name": "CONTENT",
                    "value": "[subscription().tenantId]"
                  }
                ],
                "scriptContent": "[format('echo \"$CONTENT\" > {0} && az storage blob upload -f {1} -c {2} -n {3}', variables('FileName'), variables('FileName'), parameters('StorageContainerName'), variables('FileName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ImageTemplate_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeployFSLogix": {
            "value": "[parameters('DeployFSLogix')]"
          },
          "DeployOffice": {
            "value": "[parameters('DeployOffice')]"
          },
          "DeployOneDrive": {
            "value": "[parameters('DeployOneDrive')]"
          },
          "DeployProject": {
            "value": "[parameters('DeployProject')]"
          },
          "DeployTeams": {
            "value": "[parameters('DeployTeams')]"
          },
          "DeployVirtualDesktopOptimizationTool": {
            "value": "[parameters('DeployVirtualDesktopOptimizationTool')]"
          },
          "DeployVisio": {
            "value": "[parameters('DeployVisio')]"
          },
          "ImageDefinitionResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('ComputeGallery_{0}', parameters('Timestamp'))), '2022-09-01').outputs.ImageDefinitionResourceId.value]"
          },
          "ImageOffer": {
            "value": "[parameters('ImageOffer')]"
          },
          "ImagePublisher": {
            "value": "[parameters('ImagePublisher')]"
          },
          "ImageSku": {
            "value": "[parameters('ImageSku')]"
          },
          "ImageStorageAccountType": {
            "value": "[parameters('ImageStorageAccountType')]"
          },
          "ImageTemplateName": {
            "value": "[variables('ImageTemplateName')]"
          },
          "ImageVersion": {
            "value": "[parameters('ImageVersion')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "StagingResourceGroupName": {
            "value": "[variables('StagingResourceGroupName')]"
          },
          "StorageUri": {
            "value": "[variables('StorageUri')]"
          },
          "SubnetName": {
            "value": "[parameters('SubnetName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          },
          "Timestamp": {
            "value": "[parameters('Timestamp')]"
          },
          "UserAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          },
          "VirtualMachineSize": {
            "value": "[parameters('VirtualMachineSize')]"
          },
          "VirtualNetworkName": {
            "value": "[parameters('VirtualNetworkName')]"
          },
          "VirtualNetworkResourceGroupName": {
            "value": "[parameters('VirtualNetworkResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "9506901982397235975"
            }
          },
          "parameters": {
            "DeployFSLogix": {
              "type": "bool"
            },
            "DeployOffice": {
              "type": "bool"
            },
            "DeployOneDrive": {
              "type": "bool"
            },
            "DeployProject": {
              "type": "bool"
            },
            "DeployTeams": {
              "type": "bool"
            },
            "DeployVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "DeployVisio": {
              "type": "bool"
            },
            "ImageDefinitionResourceId": {
              "type": "string"
            },
            "ImageOffer": {
              "type": "string"
            },
            "ImagePublisher": {
              "type": "string"
            },
            "ImageSku": {
              "type": "string"
            },
            "ImageStorageAccountType": {
              "type": "string"
            },
            "ImageTemplateName": {
              "type": "string"
            },
            "ImageVersion": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "StagingResourceGroupName": {
              "type": "string"
            },
            "StorageUri": {
              "type": "string"
            },
            "SubnetName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string"
            },
            "UserAssignedIdentityResourceId": {
              "type": "string"
            },
            "VirtualMachineSize": {
              "type": "string"
            },
            "VirtualNetworkName": {
              "type": "string"
            },
            "VirtualNetworkResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "CreateTempDir": [
              {
                "type": "PowerShell",
                "name": "Create TEMP Directory",
                "runElevated": true,
                "runAsSystem": true,
                "inline": [
                  "New-Item -Path \"C:\\\" -Name \"temp\" -ItemType \"Directory\" -Force | Out-Null; Write-Host \"Created Temp Directory\""
                ]
              }
            ],
            "FSLogixType": "[if(contains(parameters('ImageSku'), 'avd'), createArray(createObject('type', 'PowerShell', 'name', 'Download FSLogix', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Get-FSLogix.ps1', parameters('StorageUri'))), createObject('type', 'PowerShell', 'name', 'Uninstall FSLogix', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Remove-FSLogix.ps1', parameters('StorageUri'))), createObject('type', 'WindowsRestart', 'name', 'Restart after FSLogix uninstall', 'restartTimeout', '5m'), createObject('type', 'PowerShell', 'name', 'Install FSLogix', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Add-FSLogix.ps1', parameters('StorageUri'))), createObject('type', 'WindowsRestart', 'name', 'Restart after FSLogix install', 'restartTimeout', '5m')), createArray(createObject('type', 'PowerShell', 'name', 'Download FSLogix', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Get-FSLogix.ps1', parameters('StorageUri'))), createObject('type', 'PowerShell', 'name', 'Install FSLogix', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}fslogix.ps1', parameters('StorageUri'))), createObject('type', 'WindowsRestart', 'name', 'Restart after FSLogix install', 'restartTimeout', '5m')))]",
            "FSLogix": "[if(parameters('DeployFSLogix'), variables('FSLogixType'), createArray())]",
            "Functions": [
              {
                "type": "File",
                "name": "Download Functions Script",
                "sourceUri": "[format('{0}Set-RegistrySetting.ps1', parameters('StorageUri'))]",
                "destination": "C:\\temp\\Set-RegistrySetting.ps1"
              }
            ],
            "Office": "[if(or(or(parameters('DeployOffice'), parameters('DeployVisio')), parameters('DeployProject')), createArray(createObject('type', 'PowerShell', 'name', 'Download Microsoft Office 365', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Get-O365.ps1', parameters('StorageUri'))), createObject('type', 'File', 'name', 'Download Microsoft Office 365 Configuration File', 'sourceUri', format('{0}office365x64.xml', parameters('StorageUri')), 'destination', 'C:\\temp\\office365x64.xml'), createObject('type', 'PowerShell', 'name', 'Install Microsoft Office 365', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Add-O365.ps1', parameters('StorageUri')))), createArray())]",
            "OneDriveType": "[if(equals(parameters('ImageSku'), 'office-365'), createArray(createObject('type', 'PowerShell', 'name', 'Download OneDrive', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Get-OneDrive.ps1', parameters('StorageUri'))), createObject('type', 'File', 'name', 'Download OneDrive Configuration File', 'sourceUri', format('{0}tenantId.txt', parameters('StorageUri')), 'destination', 'C:\\temp\\tenantId.txt'), createObject('type', 'PowerShell', 'name', 'Uninstall OneDrive', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Remove-OneDrive.ps1', parameters('StorageUri'))), createObject('type', 'WindowsRestart', 'name', 'Restart after OneDrive uninstall', 'restartTimeout', '5m'), createObject('type', 'PowerShell', 'name', 'Install OneDrive', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Add-OneDrive.ps1', parameters('StorageUri')))), createArray(createObject('type', 'PowerShell', 'name', 'Download OneDrive', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Get-OneDrive.ps1', parameters('StorageUri'))), createObject('type', 'File', 'name', 'Download OneDrive Configuration File', 'sourceUri', format('{0}tenantId.txt', parameters('StorageUri')), 'destination', 'C:\\temp\\tenantId.txt'), createObject('type', 'PowerShell', 'name', 'Install OneDrive', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Add-OneDrive.ps1', parameters('StorageUri')))))]",
            "OneDrive": "[if(parameters('DeployOneDrive'), variables('OneDriveType'), createArray())]",
            "Teams": "[if(parameters('DeployTeams'), createArray(createObject('type', 'PowerShell', 'name', 'Download Teams', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Get-Teams.ps1', parameters('StorageUri'))), createObject('type', 'PowerShell', 'name', 'Install Teams', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Add-Teams.ps1', parameters('StorageUri')))), createArray())]",
            "VDOT": "[if(parameters('DeployVirtualDesktopOptimizationTool'), createArray(createObject('type', 'PowerShell', 'name', 'Download the Virtual Desktop Optimization Tool', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Get-VDOT.ps1', parameters('StorageUri'))), createObject('type', 'PowerShell', 'name', 'Execute the Virtual Desktop Optimization Tool', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}Set-VDOT.ps1', parameters('StorageUri'))), createObject('type', 'WindowsRestart', 'name', 'Restart after VDOT execution', 'restartTimeout', '5m')), createArray())]",
            "RemoveTempDir": [
              {
                "type": "PowerShell",
                "name": "Remove TEMP Directory",
                "runElevated": true,
                "runAsSystem": true,
                "inline": [
                  "Remove-Item -Path \"C:\\temp\" -Recurse -Force | Out-Null; Write-Host \"Removed Temp Directory\""
                ]
              }
            ],
            "WindowsUpdate": [
              {
                "type": "WindowsUpdate",
                "searchCriteria": "IsInstalled=0",
                "filters": [
                  "exclude:$_.Title -like '*Preview*'",
                  "include:$true"
                ]
              },
              {
                "type": "WindowsRestart",
                "name": "Restart after Windows Updates",
                "restartTimeout": "5m"
              }
            ],
            "Customizers": "[union(variables('CreateTempDir'), variables('VDOT'), variables('Functions'), variables('FSLogix'), variables('Office'), variables('OneDrive'), variables('Teams'), variables('RemoveTempDir'), variables('WindowsUpdate'))]"
          },
          "resources": [
            {
              "type": "Microsoft.VirtualMachineImages/imageTemplates",
              "apiVersion": "2022-02-14",
              "name": "[parameters('ImageTemplateName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('UserAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "stagingResourceGroup": "[format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('StagingResourceGroupName'))]",
                "buildTimeoutInMinutes": 300,
                "vmProfile": {
                  "userAssignedIdentities": [
                    "[parameters('UserAssignedIdentityResourceId')]"
                  ],
                  "vmSize": "[parameters('VirtualMachineSize')]",
                  "vnetConfig": "[if(not(empty(parameters('SubnetName'))), createObject('subnetId', resourceId(parameters('VirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('VirtualNetworkName'), parameters('SubnetName'))), null())]"
                },
                "source": {
                  "type": "PlatformImage",
                  "publisher": "[parameters('ImagePublisher')]",
                  "offer": "[parameters('ImageOffer')]",
                  "sku": "[parameters('ImageSku')]",
                  "version": "[parameters('ImageVersion')]"
                },
                "customize": "[variables('Customizers')]",
                "distribute": [
                  {
                    "type": "SharedImage",
                    "galleryImageId": "[parameters('ImageDefinitionResourceId')]",
                    "runOutputName": "[parameters('Timestamp')]",
                    "artifactTags": {},
                    "replicationRegions": [
                      "[parameters('Location')]"
                    ],
                    "storageAccountType": "[parameters('ImageStorageAccountType')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('ComputeGallery_{0}', parameters('Timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('NetworkPolicy_{0}', parameters('Timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('Office365_Configuration_{0}', parameters('Timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('OneDrive_Configuration_{0}', parameters('Timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('RoleAssignment_{0}_{1}', variables('ResourceGroup'), parameters('Timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('StorageAccountResourceGroupName')), 'Microsoft.Resources/deployments', format('RoleAssignment_{0}_{1}', parameters('StorageAccountName'), parameters('Timestamp')))]",
        "roleAssignments",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "condition": "[parameters('EnableMonitoringAndAlerting')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Monitoring_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ActionGroupName": {
            "value": "[variables('ActionGroupName')]"
          },
          "DeploymentScriptName": {
            "value": "[variables('DeploymentScriptName')]"
          },
          "DistributionGroup": {
            "value": "[parameters('DistributionGroup')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "LogAnalyticsWorkspaceName": {
            "value": "[variables('LogAnalyticsWorkspaceName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "11950115526465042262"
            }
          },
          "parameters": {
            "ActionGroupName": {
              "type": "string"
            },
            "DeploymentScriptName": {
              "type": "string"
            },
            "DistributionGroup": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "LogAnalyticsWorkspaceName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "Time": {
              "type": "string",
              "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]"
            }
          },
          "variables": {
            "Alerts": [
              {
                "name": "Azure Image Builder - Build Failure",
                "description": "Sends an error alert when a build fails on an image template for Azure Image Builder.",
                "severity": 0,
                "evaluationFrequency": "PT5M",
                "windowSize": "PT5M",
                "criteria": {
                  "allOf": [
                    {
                      "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image Template build failed\"",
                      "timeAggregation": "Count",
                      "dimensions": [
                        {
                          "name": "ResultDescription",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        }
                      ],
                      "operator": "GreaterThanOrEqual",
                      "threshold": 1,
                      "failingPeriods": {
                        "numberOfEvaluationPeriods": 1,
                        "minFailingPeriodsToAlert": 1
                      }
                    }
                  ]
                }
              },
              {
                "name": "Azure Image Builder - Build Success",
                "description": "Sends an informational alert when a build succeeds on an image template for Azure Image Builder.",
                "severity": 3,
                "evaluationFrequency": "PT5M",
                "windowSize": "PT5M",
                "criteria": {
                  "allOf": [
                    {
                      "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image Template build succeeded\"",
                      "timeAggregation": "Count",
                      "dimensions": [
                        {
                          "name": "ResultDescription",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        }
                      ],
                      "operator": "GreaterThanOrEqual",
                      "threshold": 1,
                      "failingPeriods": {
                        "numberOfEvaluationPeriods": 1,
                        "minFailingPeriodsToAlert": 1
                      }
                    }
                  ]
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('LogAnalyticsWorkspaceName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "workspaceCapping": {
                  "dailyQuotaGb": -1
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "type": "Microsoft.Insights/actionGroups",
              "apiVersion": "2022-06-01",
              "name": "[parameters('ActionGroupName')]",
              "location": "global",
              "tags": "[parameters('Tags')]",
              "properties": {
                "emailReceivers": [
                  {
                    "emailAddress": "[parameters('DistributionGroup')]",
                    "name": "[parameters('DistributionGroup')]",
                    "useCommonAlertSchema": true
                  }
                ],
                "enabled": true,
                "groupShortName": "AIB Builds"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[parameters('DeploymentScriptName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "kind": "AzurePowerShell",
              "properties": {
                "azPowerShellVersion": "6.2",
                "scriptContent": "    Write-Host \"Start\"\r\n    Get-Date\r\n    Start-Sleep -Seconds 120\r\n    Write-Host \"Stop\"\r\n    Get-Date\r\n    ",
                "cleanupPreference": "Always",
                "forceUpdateTag": "[parameters('Time')]",
                "retentionInterval": "P1D",
                "timeout": "PT10M"
              }
            },
            {
              "copy": {
                "name": "scheduledQueryRules",
                "count": "[length(range(0, length(variables('Alerts'))))]"
              },
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2022-06-15",
              "name": "[variables('Alerts')[range(0, length(variables('Alerts')))[copyIndex()]].name]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "kind": "LogAlert",
              "properties": {
                "actions": {
                  "actionGroups": [
                    "[resourceId('Microsoft.Insights/actionGroups', parameters('ActionGroupName'))]"
                  ]
                },
                "autoMitigate": false,
                "skipQueryValidation": false,
                "criteria": "[variables('Alerts')[range(0, length(variables('Alerts')))[copyIndex()]].criteria]",
                "description": "[variables('Alerts')[range(0, length(variables('Alerts')))[copyIndex()]].description]",
                "displayName": "[variables('Alerts')[range(0, length(variables('Alerts')))[copyIndex()]].name]",
                "enabled": true,
                "evaluationFrequency": "[variables('Alerts')[range(0, length(variables('Alerts')))[copyIndex()]].evaluationFrequency]",
                "severity": "[variables('Alerts')[range(0, length(variables('Alerts')))[copyIndex()]].severity]",
                "windowSize": "[variables('Alerts')[range(0, length(variables('Alerts')))[copyIndex()]].windowSize]",
                "scopes": [
                  "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsWorkspaceName'))]"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', parameters('ActionGroupName'))]",
                "[resourceId('Microsoft.Resources/deploymentScripts', parameters('DeploymentScriptName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsWorkspaceName'))]"
              ]
            }
          ],
          "outputs": {
            "LogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsWorkspaceName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]"
      ]
    },
    {
      "condition": "[parameters('EnableBuildAutomation')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AutomationAccount_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[variables('ResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AutomationAccountName": {
            "value": "[variables('AutomationAccountName')]"
          },
          "ImageOffer": {
            "value": "[parameters('ImageOffer')]"
          },
          "ImagePublisher": {
            "value": "[parameters('ImagePublisher')]"
          },
          "ImageSku": {
            "value": "[parameters('ImageSku')]"
          },
          "ImageTemplateName": {
            "value": "[variables('ImageTemplateName')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "LogAnalyticsWorkspaceResourceId": "[if(parameters('EnableMonitoringAndAlerting'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('Timestamp'))), '2022-09-01').outputs.LogAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
          "TimeZone": {
            "value": "[variables('TimeZone')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "8241329994525746051"
            }
          },
          "parameters": {
            "AutomationAccountName": {
              "type": "string"
            },
            "ImageOffer": {
              "type": "string"
            },
            "ImagePublisher": {
              "type": "string"
            },
            "ImageSku": {
              "type": "string"
            },
            "ImageTemplateName": {
              "type": "string"
            },
            "JobScheduleName": {
              "type": "string",
              "defaultValue": "[newGuid()]"
            },
            "Location": {
              "type": "string"
            },
            "LogAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "Time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "ISO 8601 timestamp used to help determine the webhook expiration date.  The webhook is hardcoded to expire 5 years after the timestamp."
              }
            },
            "TimeZone": {
              "type": "string"
            }
          },
          "variables": {
            "EnvironmentName": "[environment().name]",
            "ImageTemplateResourceGroupName": "[resourceGroup().name]",
            "Modules": [
              {
                "name": "Az.Accounts",
                "uri": "https://www.powershellgallery.com/api/v2/package/Az.Accounts"
              },
              {
                "name": "Az.ImageBuilder",
                "uri": "https://www.powershellgallery.com/api/v2/package/Az.ImageBuilder"
              }
            ],
            "Runbook": "AIB-BuildAutomation",
            "SubscriptionId": "[subscription().subscriptionId]",
            "TenantId": "[subscription().tenantId]"
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2021-06-22",
              "name": "[parameters('AutomationAccountName')]",
              "location": "[parameters('Location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "sku": {
                  "name": "Free"
                }
              }
            },
            {
              "copy": {
                "name": "modules",
                "count": "[length(variables('Modules'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Automation/automationAccounts/modules",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', parameters('AutomationAccountName'), variables('Modules')[copyIndex()].name)]",
              "location": "[parameters('Location')]",
              "properties": {
                "contentLink": {
                  "uri": "[variables('Modules')[copyIndex()].uri]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Automation/automationAccounts/runbooks",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', parameters('AutomationAccountName'), variables('Runbook'))]",
              "location": "[parameters('Location')]",
              "properties": {
                "runbookType": "PowerShell",
                "logProgress": false,
                "logVerbose": false,
                "publishContentLink": {
                  "uri": "https://raw.githubusercontent.com/jamasten/Azure/main/solutions/imageBuilder/scripts/New-AzureImageBuilderBuild.ps1",
                  "version": "1.0.0.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
                "modules"
              ]
            },
            {
              "type": "Microsoft.Automation/automationAccounts/schedules",
              "apiVersion": "2022-08-08",
              "name": "[format('{0}/{1}', parameters('AutomationAccountName'), parameters('ImageTemplateName'))]",
              "properties": {
                "frequency": "Day",
                "interval": 1,
                "startTime": "[dateTimeAdd(parameters('Time'), 'PT15M')]",
                "timeZone": "[parameters('TimeZone')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Automation/automationAccounts/jobSchedules",
              "apiVersion": "2022-08-08",
              "name": "[format('{0}/{1}', parameters('AutomationAccountName'), parameters('JobScheduleName'))]",
              "properties": {
                "parameters": {
                  "EnvironmentName": "[variables('EnvironmentName')]",
                  "ImagePublisher": "[parameters('ImagePublisher')]",
                  "ImageOffer": "[parameters('ImageOffer')]",
                  "ImageSku": "[parameters('ImageSku')]",
                  "Location": "[parameters('Location')]",
                  "SubscriptionId": "[variables('SubscriptionId')]",
                  "TemplateName": "[parameters('ImageTemplateName')]",
                  "TemplateResourceGroupName": "[variables('ImageTemplateResourceGroupName')]",
                  "TenantId": "[variables('TenantId')]"
                },
                "runbook": {
                  "name": "[variables('Runbook')]"
                },
                "schedule": {
                  "name": "[parameters('ImageTemplateName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), variables('Runbook'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('AutomationAccountName'), parameters('ImageTemplateName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('LogAnalyticsWorkspaceResourceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('AutomationAccountName'))]",
              "name": "[format('diag-{0}', parameters('AutomationAccountName'))]",
              "properties": {
                "logs": [
                  {
                    "category": "JobLogs",
                    "enabled": true
                  },
                  {
                    "category": "JobStreams",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('LogAnalyticsWorkspaceResourceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2021-06-22', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('Timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroup'))]"
      ]
    },
    {
      "copy": {
        "name": "policyExemptions",
        "count": "[length(range(0, length(parameters('ExemptPolicyAssignmentIds'))))]"
      },
      "condition": "[greater(length(parameters('ExemptPolicyAssignmentIds')), 0)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PolicyExemption_{0}', range(0, length(parameters('ExemptPolicyAssignmentIds')))[copyIndex()])]",
      "resourceGroup": "[variables('StagingResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PolicyAssignmentId": {
            "value": "[parameters('ExemptPolicyAssignmentIds')[range(0, length(parameters('ExemptPolicyAssignmentIds')))[copyIndex()]]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "15640702056699212860"
            }
          },
          "parameters": {
            "PolicyAssignmentId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policyExemptions",
              "apiVersion": "2022-07-01-preview",
              "name": "exempt-aib-staging-resource-group",
              "properties": {
                "assignmentScopeValidation": "Default",
                "description": "Exempts the AIB staging resource group to prevent issues with building images.",
                "displayName": "AIB staging resource group",
                "exemptionCategory": "Mitigated",
                "expiresOn": null,
                "metadata": null,
                "policyAssignmentId": "[parameters('PolicyAssignmentId')]",
                "policyDefinitionReferenceIds": [],
                "resourceSelectors": []
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroup')), 'Microsoft.Resources/deployments', format('ImageTemplate_{0}', parameters('Timestamp')))]"
      ]
    }
  ]
}